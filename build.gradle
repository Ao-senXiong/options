// To make build/libs/options-all.jar, run this under JDK 7: gradle shadowJar
// It must be run under JDK 7 because it includes JDK classes.
plugins { id 'com.github.johnrengelman.shadow' version '2.0.2' }

// Not "plugins { ... }" because this file is included in other build files.
apply plugin: 'java'

configurations {
  checkerFrameworkCheckerJar {
    description = 'the Checker Framework, including the Type Annotations compiler'
  }
  checkerFrameworkQual {
    description = 'type qualifiers for the Checker Framework'
  }
  checkerFrameworkJavac {
    description = 'a customization of the Open JDK javac compiler with additional support for type annotations'
  }
  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
  }
}

dependencies {

  // These dependencies are used internally, but not exposed to consumers.
  implementation 'org.apache.commons:commons-text:1.2'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'

  // for tools.jar, which contains Javadoc
  compile files(org.gradle.internal.jvm.Jvm.current().toolsJar)

  // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

  // Checker Framework from Maven Central
  ext.checkerFrameworkVersion = '2.3.2'
  ext.jdkVersion = 'jdk8'
  checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
  checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
  compileOnly "org.checkerframework:checker:${checkerFrameworkVersion}"
  compile "org.checkerframework:checker-qual7:${checkerFrameworkVersion}"

//  // Checker Framework from local build
//  ext.jdkVersion = JavaVersion.current().isJava8() ? 'jdk8' : 'jdk9'
//  ext.checkerframeworkdist = "$System.env.CHECKERFRAMEWORK/checker/dist"
//  checkerFrameworkAnnotatedJDK fileTree(dir: "${ext.checkerframeworkdist}", include: "${jdkVersion}.jar")
//  checkerFrameworkJavac fileTree(dir: "${ext.checkerframeworkdist}", include: "javac.jar")
//  checkerFrameworkCheckerJar fileTree(dir: "${ext.checkerframeworkdist}", include: "checker.jar")
//  // TODO: is this needed?  How about others?
//  checkerFrameworkQual fileTree(dir: "${ext.checkerframeworkdist}", include: "checker-qual.jar")
//  compileOnly fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker.jar')
//  compile fileTree(dir: "${ext.checkerframeworkdist}", include: 'checker-qual.jar')
}

repositories {
  mavenCentral()
}


task javadocWeb(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/options/api")
  classpath = project.sourceSets.main.compileClasspath
}


/// Checker Framework pluggable type-checking

allprojects {
  tasks.withType(JavaCompile).all { JavaCompile compile ->
      // This if statement can be removed if checker.jar is added as a testCompileOnly (in addition to the compileOnly dependency).
      if (!name.toLowerCase().contains('test')) { // https://stackoverflow.com/questions/46227703/configuring-all-gradle-javacompile-tasks-that-are-not-for-test-code
          compile.doFirst {
              compile.options.compilerArgs = [
                      '-processor', 'org.checkerframework.checker.formatter.FormatterChecker,org.checkerframework.checker.index.IndexChecker,org.checkerframework.checker.lock.LockChecker,org.checkerframework.checker.nullness.NullnessChecker,org.checkerframework.checker.signature.SignatureChecker',
                      '-Xmaxerrs', '10000',
                      '-Awarns',          // turn Checker Framework errors into warnings
                      '-source', '7', '-target', '7', // include if Java 7 compatibility is needed
                      '-AcheckPurityAnnotations',
                      "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
                      "-Astubs=$System.env.CHECKERFRAMEWORK/checker/lib/javadoc.astub" // TODO: does not work when downloading from Maven Central
              ]
              options.fork = true
              options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
          }
      }
  }
}
